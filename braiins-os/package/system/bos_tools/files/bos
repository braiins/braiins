#!/bin/sh

# Copyright (C) 2019  Braiins Systems s.r.o.
#
# This file is part of Braiins Open-Source Initiative (BOSI).
#
# BOSI is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#
# Please, keep in mind that we may also license BOSI or any part thereof
# under a proprietary license. For more information on the terms and conditions
# of such proprietary license or if you have any other questions, please
# contact us at opensource@braiins.com.

# immediately exit when error occurs
set -e

usage() {
	echo "usage: bos [-h] {factory_reset,get_factory_cfg,run_recovery,ip_report,nightly_feeds} ..."
	echo
	echo "positional arguments:"
	echo "  {factory_reset,get_factory_cfg,run_recovery,ip_report,nightly_feeds}"
	echo "    factory_reset       reboot and initiate factory reset"
	echo "    get_factory_cfg     get factory configuration for specified attribute"
	echo "    run_recovery        reboot to recovery mode"
	echo "    ip_report           broadcast IP and MAC address of device"
	echo "    nightly_feeds       turn on or off feeds with nightly build versions"
	echo
	echo "optional arguments:"
	echo "  -h, --help            show this help message and exit"
}

factory_reset() {
	if [ $# -gt 0 ]; then
		echo "command 'factory_reset' does not take any argument" >&2
		exit 1
	fi
	# erase U-Boot environment
	mtd erase uboot_env
	# U-Boot load default environment which initiate factory reset
	reboot
}

get_factory_cfg() {
	if [ $# -ne 1 ]; then
		echo "command 'get_factory_cfg' takes one argument with attribute name" >&2
		exit 1
	fi
	exec fw_printenv -c "/etc/factory_cfg.config" -n "$1"
}

run_recovery() {
	set +e
	if [ $# -gt 0 ]; then
		echo "command 'run_recovery' does not take any argument" >&2
		exit 1
	fi
	# check if uboot_env partition is not corrupted
	if [ -n "$(fw_printenv 2>&1 >/dev/null)" ]; then
		echo "U-Boot environment is corrupted and recovery mode cannot be run" >&2
		echo "Factory reset can fix this issue" >&2
		exit 1
	fi
	if [ $(uci get network.lan.proto) == 'static' ]; then
		net_ip=$(uci get network.lan.ipaddr 2>/dev/null)
		net_mask=$(uci get network.lan.netmask 2>/dev/null)
		net_gateway=$(uci get network.lan.gateway 2>/dev/null)
		net_dns_servers=$(uci get network.lan.dns 2>/dev/null | tr " " ,)
	fi
	net_hostname=$(uci get network.lan.hostname 2>/dev/null)
	[ -n "$net_hostname" ] || net_hostname=$(cat /proc/sys/kernel/hostname 2>/dev/null)
	recovery_mtdparts=$(fw_printenv -n recovery_mtdparts 2>/dev/null)
	if [ -n "$recovery_mtdparts" ]; then
		# append overlapping partition with bOS U-Boot environment
		recovery_mtdparts="$recovery_mtdparts,512k@0x700000(recovery_uboot_env)"
	fi
	# set 'recovery' variable in U-Boot environment
	fw_setenv --script - <<-EOF
		recovery=yes
		recovery_net_ip=$net_ip
		recovery_net_mask=$net_mask
		recovery_net_gateway=$net_gateway
		recovery_net_dns_servers=$net_dns_servers
		recovery_net_hostname=$net_hostname
		recovery_mtdparts=$recovery_mtdparts
		# recovery from NAND is treated as a first boot; this prevents interference
		# with inserted SD card where uEnv.txt can hinder the recovery process
		first_boot=yes
	EOF
	# U-Boot boot from different partition when variable 'recovery' is set
	reboot
}

ip_report() {
	if [ $# -gt 0 ]; then
		echo "command 'ip_report' does not take any argument" >&2
		exit 1
	fi
	# check if it is enabled in configuration
	[ $(uci get bos.ip_report.enable) == '1' ] || return 0
	# get message and socat configuration
	local format=$(uci get bos.ip_report.format)
	local socat_arg=$(uci get bos.ip_report.socat)
	# format and send message with socat utility
	local ip_addr=$(ip route get 1 | awk '{print $NF;exit}')
	local mac_addr=$(cat /sys/class/net/eth0/address)
	local hostname=$(uname -n)
	format="${format//\${IP\}/$ip_addr}"
	format="${format//\${MAC\}/$mac_addr}"
	format="${format//\${HOSTNAME\}/$hostname}"
	echo -n "$format" | socat - "$socat_arg"
}

#nightly_feeds_status() {
#	local record="$1"
#	awk \
#		'BEGIN {res="off"} /^[^#]/ && $2 ~ /^'"$record"'$/ {res="on " FILENAME} END {print res}' \
#		/etc/opkg/*.conf
#}

list_enabled_feeds() {
	local record="$1"
	awk '/^[^#]/ && $2 == "'"$record"'" {print FILENAME; nextfile}' /etc/opkg/*.conf
}

list_disabled_feeds() {
	local record="$1"
	grep -l '^[#]\+[ ]*[^ ]\+ '"$record"' ' /etc/opkg/*.conf
}

nightly_feeds_status() {
	local count=$(list_enabled_feeds "$record" | wc -l)
	[ $count -gt 0 ] && echo "on" || echo "off"
}

nightly_feeds() {
	if [ $# -gt 1 -o \( $# -eq 1 -a "$1" != 'on' -a "$1" != 'off' \) ]; then
		echo "command 'nightly_feeds' takes only one argument [on|off] or none" >&2
		exit 1
	fi
	local record="bos_firmware_nightly"
	local file line
	case $1 in
		on)
			if [ $(nightly_feeds_status "$record") == "on" ]; then
				echo "Nightly feeds are already enabled!" >&2
			else
				file=$(list_disabled_feeds "$record" | tail -n1)
				if [ -z "$file" ]; then
					echo "Cannot find any disabled nightly record '$record' in any feeds configuration file!" >&2
					exit 1
				fi
				sed -i 's/^[#]\+[ ]*\([^ ]\+ '"$record"' .*\)/\1/' "$file"
				echo "Enabling nightly record '$record' in '$file'"
			fi
		;;
		off)
			if [ $(nightly_feeds_status "$record") == "off" ]; then
				echo "Nightly feeds are already disabled!" >&2
			else
				list_enabled_feeds "$record" | \
				# comment all enabled feed records
				while IFS= read -r file; do
					sed -i 's/\(^[^ ]\+ '"$record"' .*\)/# \1/' "$file"
					echo "Disabling nightly record '$record' in '$file'"
					disabled="yes"
				done
			fi
		;;
		*)
			nightly_feeds_status "$record"
		;;
	esac
}

# check number of arguments
if [ $# -lt 1 ]; then
	echo "missing command argument" >&2
	exit 1
fi

# try to find command
command="$1"

case $command in
	factory_reset|get_factory_cfg|run_recovery|ip_report|nightly_feeds)
		shift
		$command "$@"
	;;
	-h|--help)
		usage
	;;
	*)  # unknown command
		echo "unknown command '$command'" >&2
		exit 1
	;;
esac
