#!/bin/sh

# Copyright (C) 2019  Braiins Systems s.r.o.
#
# This file is part of Braiins Open-Source Initiative (BOSI).
#
# BOSI is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#
# Please, keep in mind that we may also license BOSI or any part thereof
# under a proprietary license. For more information on the terms and conditions
# of such proprietary license or if you have any other questions, please
# contact us at opensource@braiins.com.

. /lib/functions/bos-defaults.sh

# immediately exit when error occurs
set -e

usage() {
	echo "usage: miner [-h] {factory_reset,get_factory_cfg,run_recovery,ip_report,nightly_feeds,fault_light,nand_install} ..."
	echo
	echo "positional arguments:"
	echo "  {factory_reset,get_factory_cfg,run_recovery,ip_report,nightly_feeds,fault_light,nand_install}"
	echo "    factory_reset       reboot and initiate factory reset"
	echo "    get_factory_cfg     get factory configuration for specified attribute"
	echo "    run_recovery        reboot to recovery mode"
	echo "    ip_report           broadcast IP and MAC address of device"
	echo "    nightly_feeds       turn on or off feeds with nightly build versions"
	echo "    fault_light         turn on or off miner's fault LED"
	echo "    nand_install        install/reinstall firmware to NAND"
	echo
	echo "optional arguments:"
	echo "  -h, --help            show this help message and exit"
}

factory_reset() {
	exec bos factory_reset "$@"
}

get_factory_cfg() {
	exec bos get_factory_cfg "$@"
}

run_recovery() {
	exec bos run_recovery "$@"
}

ip_report() {
	exec bos ip_report "$@"
}

nightly_feeds() {
	exec bos nightly_feeds "$@"
}

fault_light() {
	if [ $# -ne 1 -o \( "$1" != 'on' -a "$1" != 'off' \) ]; then
		echo "command 'fault_light' takes only one argument [on|off]" >&2
		exit 1
	fi
	if [ $BOS_MODE == 'recovery' ]; then
		# bosminer_monitor is not running in the recovery mode
		local red_led="/sys/class/leds/Red LED"
		if [ "$1" = 'on' ]; then
			echo "timer" > "$red_led/trigger"
			echo "50" > "$red_led/delay_on"
			echo "50" > "$red_led/delay_off"
		else
			echo "nand-disk" > "$red_led/trigger"
		fi
	else
		# send 'on' or 'off' to bosminer_monitor
		echo $1 | nc localhost 4029 >/dev/null
	fi
}

nand_install() {
	local firmware_tar="/usr/share/upgrade/firmware.tar.gz"
	local stage1_script="stage1.sh"

	if [ $# -gt 0 ]; then
		echo "command 'nand_install' does not take any argument" >&2
		exit 1
	fi

	if [ ! -f "$firmware_tar" ]; then
		echo "firmware tarball '$firmware_tar' is missing" >&2
		exit 1
	fi

	# move to temporary directory
	local tmp_dir=$(mktemp -d)
	cd "$tmp_dir"

	echo "Extracting upgrade files..."
	tar xzf "$firmware_tar"

	# get name of extracted directory
	local braiins_os=$(echo *)
	# it is needed only content of firmware directory
	mv "$braiins_os/firmware/"* .
	rm -fr "$braiins_os"

	# override CONTROL script tailored for bOS environment
	cp /usr/share/upgrade/CONTROL.bos CONTROL

	# copy auxiliary scripts
	cp /usr/share/upgrade/CONFIG .

	# prepare attributes for stage1 script
	local miner_hwid=$(cat /tmp/miner_hwid)

	echo "Running stage1 upgrade script..."
	set +e
	if /bin/sh "$stage1_script" "$miner_hwid" "" default yes cond no no; then
		echo "Upgrade stage1 has been successful!"
	else
		echo "Upgrade stage1 failed"
	fi
	set -e

	# clean up temporary directory
	cd /
	rm -fr "$tmp_dir"

	if [ $BOS_MODE == 'sd' ]; then
		echo "Please turn off the miner and change jumper to boot it from NAND!"
	else
		echo "Rebooting to installed firmware..."
		reboot
	fi
}

# check number of arguments
if [ $# -lt 1 ]; then
	echo "missing command argument" >&2
	exit 1
fi

# try to find command
command="$1"

case $command in
	factory_reset|get_factory_cfg|run_recovery|ip_report|nightly_feeds|\
	fault_light|nand_install)
		shift
		$command "$@"
	;;
	-h|--help)
		usage
	;;
	*)  # unknown command
		echo "unknown command '$command'" >&2
		exit 1
	;;
esac
